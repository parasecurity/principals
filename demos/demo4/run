#!/usr/bin/env bash
#
#  Demo 4 - Forward malicious traffic to honeypot pod 
#
set -euo pipefail

msg()
{
	local message="$1"
	local bold=$(tput bold)
	local normal=$(tput sgr0)

	echo "${bold}${message}${normal}"
}

waitUntilAllPodsRun()
{
	echo -en "\tWaiting for all pods to be deployed. This might take several minutes."

	while [[ "$(kubectl get -A pods --field-selector status.phase!=Running -o name)" != "" ]];
	do
		echo -n "."
		sleep 10
	done

	echo ""
}

setupFlowControlImage()
{
	local exists=$(curl -s http://localhost:5000/v2/_catalog | grep tsi-flow-control)

	docker build images/flow-control -t tsi-flow-control:v1.0.0 &> /dev/null
	docker tag tsi-flow-control:v1.0.0 localhost:5000/tsi-flow-control:v1.0.0 &> /dev/null
	[[ "$exists" == "" ]] && docker push localhost:5000/tsi-flow-control:v1.0.0

	readonly FLOW_IMAGE_ID=$(docker inspect tsi-flow-control:v1.0.0 | grep Id | cut -d':' -f3 | cut -c1-15)
}

setupDgaImage()
{
	local exists=$(curl -s http://localhost:5000/v2/_catalog | grep tsi-dga)

	docker build images/dga -t tsi-dga:v1.0.0 &> /dev/null
	docker tag tsi-dga:v1.0.0 localhost:5000/tsi-dga:v1.0.0 &> /dev/null
	[[ "$exists" == "" ]] && docker push localhost:5000/tsi-dga:v1.0.0

	readonly DGA_IMAGE_ID=$(docker inspect tsi-dga:v1.0.0 | grep Id | cut -d':' -f3 | cut -c1-15)
}

setupDionaeaImage()
{
	local exists=$(curl -s http://localhost:5000/v2/_catalog | grep tsi-dionaea)

	docker build images/dionaea -t tsi-dionaea:v1.0.0 &> /dev/null
	docker tag tsi-dionaea:v1.0.0 localhost:5000/tsi-dionaea:v1.0.0 &> /dev/null
	[[ "$exists" == "" ]] && docker push localhost:5000/tsi-dionaea:v1.0.0

	readonly DIONAEA_IMAGE_ID=$(docker inspect tsi-dionaea:v1.0.0 | grep Id | cut -d':' -f3 | cut -c1-15)
}

readonly MINIKUBE_STATUS=$(minikube status | grep host | awk '{print $2}')
readonly REGISTRY_STATUS=$(docker ps -q -f "name=minikube_registry")

if [[ "$MINIKUBE_STATUS" == "Running" ]];
then
	echo "Please first stop/clean minikube before running the demo"
	exit 0
fi

if [[ "$REGISTRY_STATUS" == "" ]];
then
	[[ "$(docker ps -aq -f "name=minikube_registry")" != "" ]] && docker rm minikube_registry

	msg "Starting local docker registry"
	docker run -d -p 5000:5000 --restart=always --name minikube_registry registry:2 &> /dev/null
fi

msg "Creating flow-control docker image"
setupFlowControlImage

msg "Creating dga docker image"
setupDgaImage

msg "Creating honeypod docker image"
setupDionaeaImage

msg "Starting minikube cluster"
minikube start \
    --vm-driver=docker \
    --network-plugin=cni \
    --extra-config=kubeadm.pod-network-cidr=172.16.0.0/16 \
    --extra-config=kubelet.network-plugin=cni \
    --insecure-registry="192.168.49.1:5000"

msg "Adding Antrea CNI"

kubectl apply \
    -f https://github.com/vmware-tanzu/antrea/releases/download/v0.12.0/antrea.yml \
    > /dev/null

msg "Adding Multus CNI"
kubectl apply \
    -f https://raw.githubusercontent.com/intel/multus-cni/master/images/multus-daemonset.yml \
    > /dev/null

waitUntilAllPodsRun

msg "Adding 2port network configuration"
kubectl apply -f yamls/2_port.yaml > /dev/null

# Setup Antrea Agent alias
readonly ANTREA_AGENT=$(kubectl get -A po | grep "antrea-agent" | awk '{print $2}')
readonly ANTREA_POD="kubectl -n kube-system exec -it $ANTREA_AGENT -c antrea-agent -- "
readonly ANTREA_EXEC="kubectl -n kube-system exec $ANTREA_AGENT -c antrea-agent -- "

msg "Adding demo pods"
kubectl apply -f yamls/pods > /dev/null

waitUntilAllPodsRun

msg "Copying tcp server code to antrea agent"
kubectl cp utils/agent_server.py kube-system/$ANTREA_AGENT:home/ > /dev/null

# Setup pods names and ip addresses
readonly ALICE_POD_1=alice1
readonly ALICE_POD_2=alice2
readonly ALICE_POD_3=alice3
readonly MALICE_POD=malice
readonly FLOW_CONTROL_POD=flow-control
readonly HONEYPOT_POD=dionaea
readonly DGA_PORT=$($ANTREA_POD ovs-vsctl show | grep -oE "dga-.{6}" | head -1)
readonly HONEYPOT_PORT=$($ANTREA_POD ovs-vsctl show | grep -oE "dionaea-.{6}" | head -1)
readonly FLOW_CONTROL_IP=$(kubectl exec -it flow-control -- ip a | grep inet | awk '{print $2}' | sed '3!d' |  awk -F/ '{print $1}')
readonly ANTREA_IP=$(kubectl get -A po -o wide | grep antrea-agent | awk '{print $7}')
msg "Starting antrea-agent server"
$ANTREA_EXEC bash -c "nohup python3 home/agent_server.py &"
sleep 5 

# In order to start dionaea just run `dionaea/bin/dionaea -l all,-debug -L '*'`
msg "Starting Demo"
sleep 5 

msg "Send a non-malicius nslookup request from $ALICE_POD_1" 
kubectl exec -it "$ALICE_POD_1" -- nslookup google.com

msg "Send a non-malicius nslookup request from $ALICE_POD_2" 
kubectl exec -it "$ALICE_POD_2" -- nslookup amazon.com 

msg "Send a non-malicius nslookup request from $ALICE_POD_3" 
kubectl exec -it "$ALICE_POD_3" -- nslookup netflix.com 
sleep 5

echo -e "\n\n"

msg "End of demo4!"
msg "Bringing local registry down"
docker stop minikube_registry &> /dev/null
docker rm minikube_registry &> /dev/null

echo -e "\tUse 'minikube stop' to bring kubernetes cluster down"
echo -e "\tUse 'minikube delete' to clean kubernetes cluster"
echo -e "\tUse 'docker rmi -f $FLOW_IMAGE_ID $DGA_IMAGE_ID' to clean the demo image"
