#!/usr/bin/env bash
#
#  Demo 2 - DGA
#
set -euo pipefail

source ../common/scripts/funcs.sh

readonly MINIKUBE_STATUS=$(minikube status | grep host | awk '{print $2}')

if [[ "$MINIKUBE_STATUS" == "" ]];
then
	echo "Please run '../deploy.sh' first to start the cluster"
	exit 0
fi


msg "Adding tsi security"
kubectl apply -f yamls/security

waitUntilAllPodsRun

msg "Adding demo pods"
kubectl apply -f yamls/pods

waitUntilAllPodsRun

readonly AGENT_SERVER=$(kubectl get -A po | grep "agent-server" | awk '{print $2}')
readonly AGENT_SERVER_IP=$(kubectl get -A po -o wide | grep "agent-server" | awk '{print $7}')

readonly FLOW_CONTROL=$(kubectl get -A po | grep "flow-control" | awk '{print $2}')
readonly FLOW_CONTROL_IP=$(kubectl -n security exec -it $FLOW_CONTROL -- ip a | grep inet | awk '{print $2}' | sed '3!d' |  awk -F/ '{print $1}')

readonly ALICE_POD_1=alice1
readonly ALICE_POD_2=alice2
readonly ALICE_POD_3=alice3
readonly MALICE_POD=malice
readonly DGA=$(kubectl -n security exec -it $AGENT_SERVER -- ovs-vsctl show | grep -oE "dga-.{6}" | head -1)

# msg "Starting flow-control service"
# kubectl exec "$FLOW_CONTROL" -- bash -c "nohup python3 home/forward.py -l=$FLOW_CONTROL_IP -s=$AGENT_SERVER_IP -sp=12345 &"
# sleep 1

# msg "Starting mirroring on dga port"
# kubectl -n security exec -it $AGENT_SERVER --  ovs-vsctl \
#   -- --id=@p get port $DGA \
#   -- --id=@m create mirror name=$DGA-m0 select-all=true output-port=@p \
#   -- set bridge br-int mirrors=@m

# msg "Starting dga service"
# kubectl -n security exec dga -- bash -c "nohup python3 monitor.py -m dga.model -a $FLOW_CONTROL_IP -p 8081 &>/dev/null &"  
# sleep 1

msg "Starting Demo"

MALICIOUS_URL=gqoppwnan.com
MALICIOUS_IP=$(getent hosts $MALICIOUS_URL | awk '{ print $1 }')

msg "Send a non-malicius nslookup request from $ALICE_POD_1" 
kubectl exec -it "$ALICE_POD_1" -- nslookup google.com

msg "Send a non-malicius nslookup request from $ALICE_POD_2" 
kubectl exec -it "$ALICE_POD_2" -- nslookup amazon.com 

msg "Send a non-malicius nslookup request from $ALICE_POD_3" 
kubectl exec -it "$ALICE_POD_3" -- nslookup netflix.com 
sleep 5

msg "Send a malicius nslookup request from $MALICE_POD" 
kubectl exec -it "$MALICE_POD" -- nslookup $MALICIOUS_URL && true

msg "Connectivity from $MALICE_POD to $MALICIOUS_URL should now be blocked"
kubectl exec -it "$MALICE_POD" -- ping -c3 -W1 $MALICIOUS_URL && true

msg "Actually connectivity from any pod to $MALICIOUS_URL should now be blocked"
msg "Pod $ALICE_POD_1 ping to $MALICIOUS_URL"
kubectl exec -it "$ALICE_POD_1" -- ping -c3 -W1 $MALICIOUS_URL && true
msg "Pod $ALICE_POD_2 ping to $MALICIOUS_IP ($MALICIOUS_URL IP)"
kubectl exec -it "$ALICE_POD_2" -- ping -c3 -W1 $MALICIOUS_IP && true

msg "Pod $MALICE_POD still has network access" 
kubectl exec -it "$MALICE_POD" -- ping -c3 google.com && true

msg "Cleaning cluster"

kubectl delete -f yamls/security
kubectl delete -f yamls/pods

msg "End of demo2!"