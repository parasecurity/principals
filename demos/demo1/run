#!/usr/bin/env bash
#
#  Demo 1 - Block/Unblock traffic 
#
set -euo pipefail

source ../common/scripts/funcs.sh

readonly MINIKUBE_STATUS=$(minikube status | grep host | awk '{print $2}')

if [[ "$MINIKUBE_STATUS" == "" ]];
then
	echo "Please run '../deploy.sh' first to start the cluster"
	exit 0
fi

msg "Adding tsi daemonsets"
kubectl apply -f yamls/daemonsets

waitUntilAllPodsRun

msg "Adding demo pods"
kubectl apply -f yamls/pods

waitUntilAllPodsRun

readonly AGENT_SERVER=$(kubectl get -A po | grep "agent-server" | awk '{print $2}')
readonly ALICE_POD=alice
readonly MALICE_POD="malice$(($RANDOM % 10))"
readonly FLOW_CONTROL_POD=flow-control
readonly ALICE_IP=$(kubectl get -A po -o wide | grep -w "$ALICE_POD" | awk '{print $7}')
readonly MALICE_IP=$(kubectl get -A po -o wide | grep -w "$MALICE_POD" | awk '{print $7}')
readonly AGENT_IP=$(kubectl get -A po -o wide | grep -w "$AGENT_SERVER" | awk '{print $7}')

msg "Starting Demo"

msg "Verify connectivity between $ALICE_POD and $MALICE_POD" 
kubectl exec -it "$MALICE_POD" -- ping -c3 "$ALICE_IP"

msg "Block malice ip through flow-control service"
kubectl exec "$FLOW_CONTROL_POD" -- bash -c "python3 home/forward.py -l=$AGENT_IP -s=$AGENT_IP -sp=12345 -i='{\"action\": \"block\", \"argument\": {\"ip\": \"$MALICE_IP\"}}'"
sleep 1

msg "Verify that there is no connectivity between $ALICE_POD and $MALICE_POD" 
kubectl exec -it "$MALICE_POD" -- ping -c3 -W1 "$ALICE_IP" && true

msg "Removing OpenFlow rule to block traffic from $MALICE_POD"
kubectl exec "$FLOW_CONTROL_POD" -- bash -c "python3 home/forward.py -l=$AGENT_IP -s=$AGENT_IP -sp=12345 -i='{\"action\": \"unblock\", \"argument\": {\"ip\": \"$MALICE_IP\"}}'"
sleep 1

msg "Verify connectivity between $ALICE_POD and $MALICE_POD is back" 
kubectl exec -it "$MALICE_POD" -- ping -c3 "$ALICE_IP" && true

msg "Cleaning cluster"

kubectl delete -f yamls/daemonsets/
kubectl delete -f yamls/pods

msg "End of demo1!"