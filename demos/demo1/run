#!/usr/bin/env bash
#
#  Demo 1 - Block/Unblock traffic 
#
set -euo pipefail

source ../common/scripts/funcs.sh

readonly MINIKUBE_STATUS=$(minikube status | grep host | awk '{print $2}')

if [[ "$MINIKUBE_STATUS" == "" ]];
then
	echo "Please run '../deploy.sh' first to start the cluster"
	exit 0
fi

msg "Adding tsi security"
kubectl apply -f yamls/security

msg "Adding demo pods"
kubectl apply -f yamls/pods

waitUntilAllPodsRun

readonly AGENT_POD=$(kubectl get -A po -o wide | grep "agent-server" | awk '{print $2}')
readonly AGENT_IP=$(kubectl get -A po -o wide | grep "agent-server" | awk '{print $7}')
readonly FLOW_CONTROL_POD=$(kubectl get -A po | grep "flow-control" | awk '{print $2}')

readonly ALICE_POD=alice
readonly MALICE_POD="malice$(($RANDOM % 10))"
readonly ALICE_IP=$(kubectl get -A po -o wide | grep -w "$ALICE_POD" | awk '{print $7}')
readonly MALICE_IP=$(kubectl get -A po -o wide | grep -w "$MALICE_POD" | awk '{print $7}')

msg "Starting Demo"

msg "Verify connectivity between $ALICE_POD and $MALICE_POD" 
kubectl exec -it "$MALICE_POD" -- ping -c3 "$ALICE_IP"

msg "Block malice ip through flow-control service"
kubectl exec -n security "$FLOW_CONTROL_POD" -- bash -c "python3 home/forward.py -s=$AGENT_IP -sp=12345 -a=block -i='{\"ip\": \"$MALICE_IP\"}'"
sleep 1

msg "Verify that there is no connectivity between $ALICE_POD and $MALICE_POD" 
kubectl exec -it "$MALICE_POD" -- ping -c3 -W1 "$ALICE_IP" || true

msg "Aplied ovs rules"
kubectl exec -n security "$AGENT_POD" -- bash -c "ovs-ofctl dump-flows br-int | grep 0x0"

msg "Removing OpenFlow rule to block traffic from $MALICE_POD"
kubectl exec -n security "$FLOW_CONTROL_POD" -- bash -c "python3 home/forward.py -s=$AGENT_IP -sp=12345 -a=unblock -i='{\"ip\": \"$MALICE_IP\"}'"
sleep 1

msg "Verify connectivity between $ALICE_POD and $MALICE_POD is back" 
kubectl exec -it "$MALICE_POD" -- ping -c3 "$ALICE_IP" || true

msg "Applied ovs rules (there should be none, should see 'exit code 1')"
kubectl exec -n security "$AGENT_POD" -- bash -c "ovs-ofctl dump-flows br-int | grep 0x0" || true

msg "Cleaning cluster"

kubectl exec -n security "$AGENT_POD" -- bash -c "ovs-ofctl del-flows br-int cookie=0x0/-1" &> /dev/null || true
sleep 1
kubectl delete -f yamls/security
kubectl delete -f yamls/pods

msg "End of demo1!"
