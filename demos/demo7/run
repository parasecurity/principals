#!/usr/bin/env bash
#
#  Demo 7: 2 Nodes DGA detection
#
set -euo pipefail

msg()
{
	local message="$1"
	local bold=$(tput bold)
	local normal=$(tput sgr0)

	echo "${bold}${message}${normal}"
}

waitUntilAllPodsRun()
{
	echo -en "\tWaiting for all pods to be deployed. This might take several minutes."

	while [[ "$(kubectl get -A pods --field-selector status.phase!=Running -o name)" != "" ]];
	do
		echo -n "."
		sleep 10
	done

	echo ""
}

setupDgaImage()
{
	local exists=$(curl -s http://localhost:5000/v2/tsi-dga/tags/list | grep v1.7.0)

	docker build images/dga -t tsi-dga:v1.7.0
	docker tag tsi-dga:v1.7.0 localhost:5000/tsi-dga:v1.7.0 
	[[ "$exists" == "" ]] && docker push localhost:5000/tsi-dga:v1.7.0 

	readonly DGA_IMAGE_ID=$(docker inspect tsi-dga:v1.7.0 | grep Id | cut -d':' -f3 | cut -c1-15)
}

setupFlowServerImage()
{
	local exists=$(curl -s http://localhost:5000/v2/tsi-flow-server/tags/list | grep v1.7.0)

	docker build images/flow_control_server -t tsi-flow-server:v1.7.0 &> /dev/null
	docker tag tsi-flow-server:v1.7.0 localhost:5000/tsi-flow-server:v1.7.0 &> /dev/null
	[[ "$exists" == "" ]] && docker push localhost:5000/tsi-flow-server:v1.7.0 &> /dev/null

	readonly FLOW_SERVER_IMAGE_ID=$(docker inspect tsi-flow-server:v1.7.0 | grep Id | cut -d':' -f3 | cut -c1-15)
}

setupFlowClientImage()
{
	local exists=$(curl -s http://localhost:5000/v2/tsi-flow-client/tags/list | grep v1.7.0)

	docker build images/flow_control_client -t tsi-flow-client:v1.7.0 &> /dev/null
	docker tag tsi-flow-client:v1.7.0 localhost:5000/tsi-flow-client:v1.7.0 &> /dev/null
	[[ "$exists" == "" ]] && docker push localhost:5000/tsi-flow-client:v1.7.0 &> /dev/null

	readonly FLOW_CLIENT_IMAGE_ID=$(docker inspect tsi-flow-client:v1.7.0 | grep Id | cut -d':' -f3 | cut -c1-15)
}

setVariables()
{
	# readarray -t NODES < <(kubectl get nodes | grep "minikube" | awk '{print $1}')
	NODES=()
	NODES+=( $(kubectl get nodes | grep "minikube" | awk '{print $1}') )

	ANTREA_AGENTS=()
	for t in ${NODES[@]}; do
	ANTREA_AGENTS+=( $(kubectl get -A po --field-selector spec.nodeName=$t | grep "antrea-agent" | awk '{print $2}') )
	done

	ANTREA_AGENT_IPS=()
	for t in ${ANTREA_AGENTS[@]}; do
	ANTREA_AGENT_IPS+=( $(kubectl get -A po -o wide | grep "$t" | awk '{print $7}') )
	done

	DGAS=()
	for t in ${NODES[@]}; do
	DGAS+=( $(kubectl get -A po --field-selector spec.nodeName=$t | grep "dga" | awk '{print $2}') )
	done

	ANTREA_DGA_PORTS=()
	for t in ${ANTREA_AGENTS[@]}; do
	ANTREA_DGA_PORTS+=( $(kubectl -n kube-system exec $t -c antrea-agent -- ovs-vsctl show | grep -oE "dga-.{11}" | head -1) )
	done

	FLOW_CLIENTS=()
	for t in ${NODES[@]}; do
	FLOW_CLIENTS+=( $(kubectl get -A po --field-selector spec.nodeName=$t | grep "flow-client" | awk '{print $2}') )
	done
	
	FLOW_CLIENT_IPS=()
	for t in ${FLOW_CLIENTS[@]}; do
	FLOW_CLIENT_IPS+=( $(kubectl get -A po -o wide | grep "$t" | awk '{print $7}') )
	done

	FLOW_CLIENT_SECONDARY_IPS=()
	for t in ${FLOW_CLIENTS[@]}; do
	FLOW_CLIENT_SECONDARY_IPS+=( $(kubectl exec -it $t -- ip a | grep inet | awk '{print $2}' | sed '3!d' |  awk -F/ '{print $1}'))
	done
}

readonly MINIKUBE_STATUS=$(minikube status | grep host | awk '{print $2}')
readonly REGISTRY_STATUS=$(docker ps -q -f "name=minikube_registry")

if [[ "$REGISTRY_STATUS" == "" ]];
then
	[[ "$(docker ps -aq -f "name=minikube_registry")" != "" ]] && docker rm minikube_registry

	msg "Starting local docker registry"
	docker run -d -p 5000:5000 --restart=always --name minikube_registry registry:2 
fi

msg "Creating dga docker image"
setupDgaImage

msg "Creating flow server docker image"
setupFlowServerImage

msg "Creating flow client docker image"
setupFlowClientImage

NODES=()
ANTREA_AGENTS=()
ANTREA_AGENT_IPS=()
DGAS=()
ANTREA_DGA_PORTS=()
FLOW_CLIENTS=()
FLOW_CLIENT_IPS=()
FLOW_CLIENT_SECONDARY_IPS=()

while [ ${#NODES[@]} -eq 0 ] || [ ${#NODES[@]} -ne ${#FLOW_CLIENT_SECONDARY_IPS[@]} ]; do
	minikube stop && minikube delete
	msg "Starting minikube cluster with one node"
	minikube start \
		--vm-driver=docker \
		--network-plugin=cni \
		--cni=images/antrea.yml \
		--insecure-registry="192.168.49.1:5000" \
		--nodes 1

	msg "Adding Multus CNI"
	kubectl apply \
		-f https://raw.githubusercontent.com/intel/multus-cni/master/images/multus-daemonset.yml \
		> /dev/null

	waitUntilAllPodsRun

	msg "Adding 2port network configuration"
	kubectl apply -f yamls/2_port.yaml > /dev/null

	waitUntilAllPodsRun

	msg "Adding pods"
	kubectl apply -f yamls/pods > /dev/null

	waitUntilAllPodsRun

	setVariables
done

readonly FLOW_SERVER=$(kubectl get -A po | grep "flow-server" | awk '{print $2}')
readonly FLOW_SERVER_IP=$(kubectl get -A po -o wide | grep "flow-server" | awk '{print $7}')

declare -p NODES
declare -p ANTREA_AGENTS
declare -p ANTREA_AGENT_IPS
declare -p DGAS 
declare -p ANTREA_DGA_PORTS 
declare -p FLOW_CLIENTS
declare -p FLOW_CLIENT_IPS
declare -p FLOW_CLIENT_SECONDARY_IPS
declare -p FLOW_SERVER
declare -p FLOW_SERVER_IP

msg "Copying service code to antrea agent"
for t in ${ANTREA_AGENTS[@]}; do
  kubectl cp utils/agent_server.py kube-system/$t:home/ -c antrea-agent
done

msg "Starting flow-control server"
kubectl exec $FLOW_SERVER -n kube-system -- bash -c "nohup go run tcp_server.go &"
sleep 2

msg "Connecting both antrea-agents to flow-control server"
for t in ${ANTREA_AGENTS[@]}; do
  xterm -e kubectl -n kube-system exec -it $t -c antrea-agent -- bash -c "python3 home/agent_server.py -i $FLOW_SERVER_IP -p 23456" &
done
sleep 2

msg "Starting flow-control services"

for i in ${!FLOW_CLIENTS[@]}; do
  xterm -e kubectl exec -it ${FLOW_CLIENTS[i]} -- bash -c "python3 flow_client.py -i '{\"action\": \"block\", \"send_ip\": \"$FLOW_SERVER_IP\", \"listen_ip\": \"${FLOW_CLIENT_SECONDARY_IPS[i]}\"}' " &
done
sleep 5

msg "Starting mirroring on dga ports on all nodes"
for i in ${!ANTREA_AGENTS[@]}; do
kubectl -n kube-system exec -it ${ANTREA_AGENTS[i]} -c antrea-agent --  ovs-vsctl \
  -- --id=@p get port ${ANTREA_DGA_PORTS[i]} \
  -- --id=@m create mirror name=m0 select-all=true output-port=@p \
  -- set bridge br-int mirrors=@m
done

msg "Starting dga services"
for i in ${!DGAS[@]}; do
  xterm -e kubectl exec -it ${DGAS[i]} -- bash -c "python3 monitor.py -m dga.model -a ${FLOW_CLIENT_SECONDARY_IPS[i]}" &
done
sleep 5

msg "Starting Demo"
sleep 5

echo -e "\n\n"
msg "End of demo7!"
msg "Bringing local registry down"
docker stop minikube_registry &> /dev/null
docker rm minikube_registry &> /dev/null

echo -e "\tUse 'minikube stop' to bring kubernetes cluster down"
echo -e "\tUse 'minikube delete' to clean kubernetes cluster"
echo -e "\tUse 'docker rmi -f $DGA_IMAGE_ID $FLOW_SERVER_IMAGE_ID $FLOW_CLIENT_IMAGE_ID' to clean the demo image"
