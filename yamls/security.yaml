---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: network-attachment-definitions.k8s.cni.cncf.io
spec:
  group: k8s.cni.cncf.io
  scope: Namespaced
  names:
    plural: network-attachment-definitions
    singular: network-attachment-definition
    kind: NetworkAttachmentDefinition
    shortNames:
    - net-attach-def
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          description: 'NetworkAttachmentDefinition is a CRD schema specified by the Network Plumbing
            Working Group to express the intent for attaching pods to one or more logical or physical
            networks. More information available at: https://github.com/k8snetworkplumbingwg/multi-net-spec'
          type: object
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this represen
                tation of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: 'NetworkAttachmentDefinition spec defines the desired state of a network attachment'
              type: object
              properties:
                config:
                  description: 'NetworkAttachmentDefinition config is a JSON-formatted CNI configuration'
                  type: string
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: multus
rules:
  - apiGroups: ["k8s.cni.cncf.io"]
    resources:
      - '*'
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/status
    verbs:
      - get
      - update
  - apiGroups:
      - ""
      - events.k8s.io
    resources:
      - events
    verbs:
      - create
      - patch
      - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: multus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multus
subjects:
- kind: ServiceAccount
  name: multus
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multus
  namespace: kube-system
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: multus-cni-config
  namespace: kube-system
  labels:
    tier: node
    app: multus
data:
  # NOTE: If you'd prefer to manually apply a configuration file, you may create one here.
  # In the case you'd like to customize the Multus installation, you should change the arguments to the Multus pod
  # change the "args" line below from
  # - "--multus-conf-file=auto"
  # to:
  # "--multus-conf-file=/tmp/multus-conf/70-multus.conf"
  # Additionally -- you should ensure that the name "70-multus.conf" is the alphabetically first name in the
  # /etc/cni/net.d/ directory on each node, otherwise, it will not be used by the Kubelet.
  cni-conf.json: |
    {
      "name": "multus-cni-network",
      "type": "multus",
      "capabilities": {
        "portMappings": true
      },
      "delegates": [
        {
          "cniVersion": "0.3.1",
          "name": "default-cni-network",
          "plugins": [
            {
              "type": "flannel",
              "name": "flannel.1",
                "delegate": {
                  "isDefaultGateway": true,
                  "hairpinMode": true
                }
              },
              {
                "type": "portmap",
                "capabilities": {
                  "portMappings": true
                }
              }
          ]
        }
      ],
      "kubeconfig": "/etc/cni/net.d/multus.d/multus.kubeconfig"
    }
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-multus-ds
  namespace: kube-system
  labels:
    tier: node
    app: multus
    name: multus
spec:
  selector:
    matchLabels:
      name: multus
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        tier: node
        app: multus
        name: multus
    spec:
      hostNetwork: true
      tolerations:
      - operator: Exists
        effect: NoSchedule
      serviceAccountName: multus
      containers:
      - name: kube-multus
        image: ghcr.io/k8snetworkplumbingwg/multus-cni:stable
        command: ["/entrypoint.sh"]
        args:
        - "--multus-conf-file=auto"
        - "--cni-version=0.3.1"
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          privileged: true
        volumeMounts:
        - name: cni
          mountPath: /host/etc/cni/net.d
        - name: cnibin
          mountPath: /host/opt/cni/bin
        - name: multus-cfg
          mountPath: /tmp/multus-conf
      terminationGracePeriodSeconds: 10
      volumes:
        - name: cni
          hostPath:
            path: /etc/cni/net.d
        - name: cnibin
          hostPath:
            path: /opt/cni/bin
        - name: multus-cfg
          configMap:
            name: multus-cni-config
            items:
            - key: cni-conf.json
              path: 70-multus.conf
---
apiVersion: v1
kind: Namespace
metadata:
  name: security
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: security
  name: flow-server
  namespace: security
---
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: macvlan-host-local
  namespace: security
spec:
  config: '{
      "cniVersion": "0.3.0",
      "type": "macvlan",
      "master": "eth0",
      "mode": "bridge",
      "ipam": {
          "type": "host-local",
          "subnet": "10.1.1.0/24",
          "rangeStart": "10.1.1.10",
          "rangeEnd": "10.1.1.200"      
        }
    }'
---
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: macvlan-conf
  namespace: security
spec:
  config: '{
    "cniVersion": "0.3.1",
    "type": "macvlan",
    "capabilities": { "ips": true },
    "master": "eth0",
    "mode": "bridge",
    "ipam": {
    "type": "static",
    "routes": [
    {
    "dst": "0.0.0.0/0",
    "gw": "10.1.1.1"
    }
    ]
    }
    }'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: security
    component: flow-broadcaster
  name: flow-broadcaster
  namespace: security
spec:
  replicas: 1
  selector:
    matchLabels:
      app: security
      component: flow-broadcaster
  template:
    metadata:
      labels:
        app: security
        component: flow-broadcaster
    spec:
      containers:
      - name: flow-broadcaster
        image: 10.8.8.2:5000/antrea-tsi:v1.0.5
        command:
          - /home/tsi/bin/broadcaster
        args:
          - -c
          - $(IP):30000
          - -ac
          - $(IP):30001
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        imagePullPolicy: Always
        ports:
          - containerPort: 30000
          - containerPort: 30001
---
apiVersion: v1
kind: Service
metadata:
  name: flow-broadcaster
  namespace: security
spec:
  type: ClusterIP
  selector:
    app: security
    component: flow-broadcaster
  ports:
    - port: 30000
      targetPort: 30000
      name: flow
    - port: 30001
      targetPort: 30001
      name: api
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: security
    component: flow-server
  name: flow-server
  namespace: security
spec:
  selector:
    matchLabels:
      app: security
      component: flow-server
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: flow-server
        k8s.v1.cni.cncf.io/networks: '[
          { "name": "macvlan-conf",
          "ips": [ "10.1.1.201/24" ],
          "mac": "c2:b0:57:49:47:f1",
          "gateway": [ "10.1.1.1" ]
          }]'
      labels:
        app: security
        component: flow-server
    spec:
      containers:
      - name: flow-server
        image: 10.8.8.2:5000/antrea-tsi:v1.0.5
        command: ['bash', '-c', "/home/tsi/bin/server -bc $(FLOW_BROADCASTER_SERVICE_HOST):$(FLOW_BROADCASTER_SERVICE_PORT_FLOW) -c 10.1.1.201:30002 -s $(ip a | grep inet | head -2 | tail -1 | awk '{print $2}')"]
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        imagePullPolicy: Always
        ports:
          - containerPort: 30002
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /var/run/openvswitch
            name: host-var-run-antrea
            subPath: openvswitch
      dnsPolicy: ClusterFirstWithHostNet
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      serviceAccountName: flow-server
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
      volumes:
        - hostPath:
            path: /var/run/antrea
            type: DirectoryOrCreate
          name: host-var-run-antrea
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: security
  labels:
    app: security
    component: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: security
      component: api
  template:
    metadata:
      labels:
        app: security
        component: api
    spec:
      containers:
      - env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        name: api
        image: 10.8.8.2:5000/tsi-api:v1.0.1
        imagePullPolicy: Always 
        volumeMounts:
          - mountPath: /home/.kube/
            name: kubeconfig
        command:
          - ./server
        args:
          - -ll=$(IP):8001
          - -r=147.27.39.116
        ports:
        - containerPort: 8000
        - containerPort: 8001
      nodeSelector:
        dedicated: master
      volumes:
      - hostPath:
          path: /home/gntousakis/.kube/
          type: DirectoryOrCreate
        name: kubeconfig
---
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: security
spec:
  type: ClusterIP
  selector:
    app: security
    component: api
  clusterIP: 10.104.54.11
  ports:
    - port: 8001
      targetPort: 8001
      protocol: TCP
      name: local-api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: security
    component: statistics-server
  name: statistics-server
  namespace: security
spec:
  replicas: 1
  selector:
    matchLabels:
      app: security
      component: statistics-server
  template:
    metadata:
      labels:
        app: security
        component: statistics-server
    spec:
      containers:
      - name: statistics-server
        image: 10.8.8.2:5000/antrea-tsi:v1.0.5
        command:
          - /home/tsi/bin/statisticsServer
        args:
          - -c
          - $(IP):30000
          - -ac
          - $(IP):30001
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        imagePullPolicy: Always
        volumeMounts:
          - mountPath: /tmp
            name: logsock
        ports:
          - containerPort: 30000
          - containerPort: 30001
      volumes:
      - hostPath:
          path: /tmp
          type: Directory
        name: logsock
---
apiVersion: v1
kind: Service
metadata:
  name: statistics-server
  namespace: security
spec:
  type: ClusterIP
  selector:
    app: security
    component: statistics-server
  ports:
    - port: 30000
      targetPort: 30000
      name: client
    - port: 30001
      targetPort: 30001
      name: api
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: security
  name: statistics-client
  namespace: security
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: security
    component: statistics-client
  name: statistics-client
  namespace: security
spec:
  selector:
    matchLabels:
      app: security
      component: statistics-client
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: statistics-client
        k8s.v1.cni.cncf.io/networks: '[
          { "name": "macvlan-conf",
          "ips": [ "10.1.1.205/24" ],
          "mac": "c2:b0:57:49:47:f1",
          "gateway": [ "10.1.1.1" ]
          }]'
      labels:
        app: security
        component: statistics-client
    spec:
      containers:
      - name: statistics-client
        image: 10.8.8.2:5000/antrea-tsi:v1.0.5
        command: ['bash', '-c', "/home/tsi/bin/statisticsClient -bc $(STATISTICS_SERVER_SERVICE_HOST):$(STATISTICS_SERVER_SERVICE_PORT) -c 10.1.1.205:30002"]
        env:
        - name: IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: Always
        ports:
          - containerPort: 30002
        securityContext:
          privileged: true
  updateStrategy:
    type: RollingUpdate
