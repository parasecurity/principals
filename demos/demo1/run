#!/usr/bin/env bash
#   
#   PRINCIPALS
#   Integrated Demo - Evaluation Phase 1
#
# 
set -euo pipefail
source ../common/scripts/funcs.sh

check() {
	msg "Checking requirements"
	_ok=ok
	
    if [ ! -d yamls ]; then
		errmsg "Error: Directory yamls does not exist!"
		wrnmsg "  Please make sure you are in demo directory and\n"
		wrnmsg "  your repo is up to date.\n"
		exit 2
	fi

	if [ ! -d yamls/security ]; then
		errmsg "Error: Directory yamls/security does not exist!"
		wrnmsg "  Please make sure you have configured the demo\n"
		_ok=""
	elif [ ! "$(ls yamls/security 2> /dev/null)" ] ; then
		errmsg "Error: Directory yamls/security is empty!"
		wrnmsg "  Please make sure you have configured the demo"\n
		_ok=""
	fi

	if [ ! -d yamls/pods ]; then
		errmsg "Error: Directory yamls/pods does not exist!"
		wrnmsg "  Please make sure you have configured the demo\n"
		_ok=""
	elif [ ! "$(ls yamls/pods 2> /dev/null)" ] ; then
		errmsg "Error: Directory yamls/pods is empty!"
		wrnmsg "  Please make sure you have configured the demo\n"
		_ok=""
	fi

	if [ "$_ok" = "" ]; then
		exit 2
	fi
}

load_vars(){
	readonly AGENT_POD_1=$(kubectl get -A po -o wide | grep "flow-server" | head -1 | awk '{print $2}')
	readonly ANTREA_POD_1=$(kubectl get -A po -o wide | grep "antrea-agent" | head -1 | awk '{print $2}')
	readonly API=$(kubectl get po -o wide -n security | grep "api" | awk '{print $1}')
	readonly ALICE_POD_1=alice
	readonly ALICE_POD_2=alice2
	readonly ALICE_POD_3=alice3
    readonly ALICE_POD_4=alice4
	readonly ALICE_POD_5=alice5
	readonly ALICE_POD_6=alice6
	readonly ALICE_POD_7=alice7
	readonly ALICE_POD_8=alice8
	readonly MALICE_POD_1=malice1
	readonly MALICE_POD_2=malice2
	readonly MALICE_POD_3=malice3
	readonly MALICE_POD_4=malice4
	readonly MALICE_POD_5=malice5
	readonly MALICE_POD_6=malice6
	readonly MALICE_POD_7=malice7
	readonly MALICE_POD_8=malice8
	readonly MALICE_POD_9=malice9
	readonly MALICE_POD_10=malice10
	readonly MALICE_POD_11=malice11
	readonly MALICE_POD_12=malice12

	readonly MALICE_POD_13=attack1
	readonly MALICE_POD_14=attack2
	readonly MALICE_POD_15=attack3
	readonly MALICE_POD_16=attack4
	readonly MALICE_POD_17=attack5
	readonly MALICE_POD_18=attack6
	readonly MALICE_POD_19=attack7
	readonly MALICE_POD_20=attack8
	readonly MALICE_POD_21=attack9
	readonly MALICE_POD_22=attack10
	readonly MALICE_POD_23=attack11
	readonly MALICE_POD_24=attack12
	readonly MALICE_POD_25=attack13
	readonly MALICE_POD_26=attack14
	readonly MALICE_POD_27=attack15
	readonly MALICE_POD_28=attack16
	readonly MALICE_POD_29=attack17
	readonly MALICE_POD_30=attack18
	readonly MALICE_POD_31=attack19
	readonly MALICE_POD_32=attack20
	readonly MALICE_POD_33=attack21
	readonly MALICE_POD_34=attack22
	readonly MALICE_POD_35=attack23
	readonly MALICE_POD_36=attack24
	readonly MALICE_POD_37=attack25
	readonly MALICE_POD_38=attack26
	readonly MALICE_POD_39=attack27

    readonly USERS=20
    readonly ALICE_USERS=8

}

init(){
	
	msg "Adding tsi security"
	kubectl apply -f yamls/security
    load_vars
    waitUntilAllPodsRun

	msg "Starting 5G Core and RAN"
   	/bin/bash ./charts/slice_confx.sh $USERS
	waitUntilAllPodsRun
}

clean_cluster(){
	echo -e "\n\n"
	msg "Cleaning cluster"

	msg "Removing deployed pods"
	kubectl delete -f yamls/security || true
	kubectl delete -f yamls/pods || true

	msg "Removing qos and queue"
	kubectl exec -n kube-system "$ANTREA_POD_1" -- bash -c "ovs-vsctl --all destroy qos" &> /dev/null || true
	kubectl exec -n kube-system "$ANTREA_POD_1" -- bash -c "ovs-vsctl --all destroy queue" &> /dev/null || true

	msg "Removing applied rules from nodes"
	kubectl exec -n security "$AGENT_POD_1" -- bash -c "ovs-ofctl del-flows br-int cookie=0x0/-1 | true" &> /dev/null || true

	msg "Removing 5G Deployment"
	/bin/bash ./charts/undeploy_all.sh $USERS 

	msg "End of demo!"
	exit
}

http_flooding()
{
    MALICE_USERS=$(($USERS-$ALICE_USERS))
    for ((i=1;i<=$ALICE_USERS;i++))
    do
        ci=$(($i+9))
        declare GNBSIM_NORM_$i=$(kubectl get pods -n oai  | grep gnbsim$ci | awk '{print $1}')
    done
    for ((i=1;i<=$MALICE_USERS;i++))
    do
        ci=$(($i+9+$ALICE_USERS))
        declare GNBSIM_ATTC_$i=$(kubectl get pods -n oai  | grep gnbsim$ci | awk '{print $1}')
    done

    SERVER_ADDRESS="kronos.mhl.tuc.gr:30002"

    msg "Starting DDoS Demo"
    canaryCommands="{\"action\":\"create\", \"target\": \"canary\", \"arguments\": [\"-conn=http://$dnn_net1IP/\"]}"
    detectorCommands="{\"action\":\"create\", \"target\": \"detector\", \"arguments\": [\"-c=block\"]}"

    msg "Deploying canary client to monitor the health of the website (4 failures to spawn detector)" 
    kubectl exec -it "$API" -n security -- ./client -arg "$canaryCommands"
      
    msg "Deploying detector with mirroring but with BPF filter disabled" 
    kubectl exec -it "$API" -n security -- ./client -arg "$detectorCommands"
      
    msg "Sending normal requests to http://$dnn_net1IP:30002/ from normal 5G users" 
    kubectl exec -n oai "$GNBSIM_NORM_1" -- bash -c "nohup /gnbsim/bin/demo_tools/alice -conn=http://$dnn_net1IP:30002/ -dev=6 -s=2000 &"
    kubectl exec -n oai "$GNBSIM_NORM_2" -- bash -c "nohup /gnbsim/bin/demo_tools/alice -conn=http://$dnn_net1IP:30002/ -dev=7 -s=2000 &"
    kubectl exec -n oai "$GNBSIM_NORM_3" -- bash -c "nohup /gnbsim/bin/demo_tools/alice -conn=http://$dnn_net1IP:30002/ -dev=7 -s=3000 &"
    kubectl exec -n oai "$GNBSIM_NORM_4" -- bash -c "nohup /gnbsim/bin/demo_tools/alice -conn=http://$dnn_net1IP:30002/ -dev=9 -s=2000 &"
    kubectl exec -n oai "$GNBSIM_NORM_5" -- bash -c "nohup /gnbsim/bin/demo_tools/alice -conn=http://$dnn_net1IP:30002/ -dev=9 -s=1500 &"
    kubectl exec -n oai "$GNBSIM_NORM_6" -- bash -c "nohup /gnbsim/bin/demo_tools/alice -conn=http://$dnn_net1IP:30002/ -dev=10 -s=2000 &"
    kubectl exec -n oai "$GNBSIM_NORM_7" -- bash -c "nohup /gnbsim/bin/demo_tools/alice -conn=http://$dnn_net1IP:30002/ -dev=11 -s=2000 &"
    kubectl exec -n oai "$GNBSIM_NORM_8" -- bash -c "nohup /gnbsim/bin/demo_tools/alice -conn=http://$dnn_net1IP:30002/ -dev=12 -s=2000 &"
    waitUntilAllPodsRun
      
    CANARY_1=$(kubectl get po -o wide -n security | grep "canary" | awk '{print $1}' | head -1)

    msg "Please open one new terminal and execute the following command" 
    echo "./see_parser"
    read -p "Press enter to continue"

    msg "Creating DDoS traffic from malicious 5G Users"
    kubectl exec -n oai "$GNBSIM_ATTC_1" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"
    kubectl exec -n oai "$GNBSIM_ATTC_2" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"
    kubectl exec -n oai "$GNBSIM_ATTC_3" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"
    kubectl exec -n oai "$GNBSIM_ATTC_4" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"
    kubectl exec -n oai "$GNBSIM_ATTC_5" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"
    kubectl exec -n oai "$GNBSIM_ATTC_6" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"
    kubectl exec -n oai "$GNBSIM_ATTC_7" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"
    kubectl exec -n oai "$GNBSIM_ATTC_8" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"
    kubectl exec -n oai "$GNBSIM_ATTC_9" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"
    kubectl exec -n oai "$GNBSIM_ATTC_10" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"
    kubectl exec -n oai "$GNBSIM_ATTC_11" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"
    kubectl exec -n oai "$GNBSIM_ATTC_12" -- bash -c "nohup /gnbsim/bin/demo_tools/client -conn=http://$dnn_net1IP:30002/ -c 100 -s 0 -t 0  &"

    sleep 2

    msg "Waiting for the Web server to be responsive again" 
    read -p "Press enter to continue"
     
    msg "Removing canary deployment" 
    kubectl exec -it "$API" -n security -- ./client -arg "{\"action\":\"delete\", \"target\": \"canary\", \"arguments\": []}" 
      
    msg "Removing detector deployment" 
    kubectl exec -it "$API" -n security -- ./client -arg "{\"action\":\"delete\", \"target\": \"detector\", \"arguments\": []}"

    msg "Cleaning cluster"
    kubectl exec -n security "$AGENT_POD_1" -- bash -c "ovs-ofctl del-flows br-int cookie=0x0/-1" &> /dev/null || true      
    kubectl exec -n security "$AGENT_POD_1" -- bash -c "ovs-vsctl clear bridge br-int mirrors"

	msg "Please review the time report"
	echo "cat ~/tsi/parser.log"
    read -p "Press enter to continue"

	msg "Please remove the time report"
	echo "sudo rm ~/tsi/*.log"
    read -p "Press enter to continue"

    echo -e "\n"
}

udp_flooding()
{
    msg "Starting Udp Flooding Demo"
    
    canaryCommands="{\"action\":\"create\", \"target\": \"canary\", \"arguments\": [\"-conn=http://$dnn_net1IP:30002/\"]}"
    detectorCommands="{\"action\":\"create\", \"target\": \"detector\", \"arguments\": [\"-c=block\"]}"
      
	if [ $# -eq 1 ]; then if [ $1 = "-i" ]; then
		read -p "Enter canary deployment command: " canaryCommands
		read -p "Enter detector deployment command: " detectorCommands
	fi; fi
      
	msg "Please apply 1GP/s limit on phobos 3" 
    echo "sudo ethtool -s enp81s0f0 speed 1000 duplex full autoneg on"
    read -p "Press enter to continue"

	msg "Please start a scp session" 
    echo "scp santonatos@$dnn_net1IP:/home/santonatos/hugefile /dev/null"
    read -p "Press enter to continue"

    msg "Deploying link canary client to monitor the health of the website (4 failures to spawn detector)" 
    kubectl exec -it "$API" -n security -- ./client -arg "$canaryCommands"
      
    msg "Deploying detector with mirroring but with BPF filter disabled" 
    kubectl exec -it "$API" -n security -- ./client -arg "$detectorCommands"

    msg "Sending normal requests to http://$dnn_net1IP:30002/ from alice" 
    kubectl exec "$ALICE_POD_1" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ &"
    kubectl exec "$ALICE_POD_2" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=7 -s=2000 &"
    kubectl exec "$ALICE_POD_3" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=7 -s=3000 &"
    kubectl exec "$ALICE_POD_4" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=9 -s=2000 &"
    kubectl exec "$ALICE_POD_5" -- bash -c "nohup /home/tsi/bin/alice -conn=http://youtube.com/ -dev=9 -s=3000 &"
    kubectl exec "$ALICE_POD_6" -- bash -c "nohup /home/tsi/bin/alice -conn=http://amazon.com/ -dev=7 -s=3000 &"
    kubectl exec "$ALICE_POD_7" -- bash -c "nohup /home/tsi/bin/alice -conn=http://facebook.com/ -dev=7 -s=3000 &"
    kubectl exec "$ALICE_POD_8" -- bash -c "nohup /home/tsi/bin/alice -conn=http://apple.com/ -dev=9 -s=3000 &"

    kubectl exec "$ALICE_POD_1" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=6 -s=2000 &"
    kubectl exec "$ALICE_POD_2" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=7 -s=2000 &"
    kubectl exec "$ALICE_POD_3" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=7 -s=3000 &"
    kubectl exec "$ALICE_POD_4" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=9 -s=2000 &"
    kubectl exec "$ALICE_POD_5" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=9 -s=1500 &"
    kubectl exec "$ALICE_POD_6" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=10 -s=2000 &"
    kubectl exec "$ALICE_POD_7" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=11 -s=2000 &"
    kubectl exec "$ALICE_POD_8" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=12 -s=2000 &"

    waitUntilAllPodsRun
    CANARY_1=$(kubectl get po -o wide -n security | grep "canary" | awk '{print $1}' | head -1)
    CANARY_2=$(kubectl get po -o wide -n security | grep "canary" | awk '{print $1}' | tail -1)

    msg "Please open one new terminal and execute the following command" 
    echo "./see_parser"
    read -p "Press enter to continue"

    msg "Creating UDP flooding traffic from malicious pods"
    kubectl exec "$MALICE_POD_13" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_14" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_15" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_16" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_17" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_18" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_19" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_20" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_21" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_22" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_23" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_24" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_25" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_26" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_27" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_28" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_29" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_30" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_31" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_32" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_33" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_34" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_35" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_36" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    kubectl exec "$MALICE_POD_37" -- bash -c "nohup ./home/tsi/bin/udpFlooding -ip 10.137.7.23 -p 6002 -c 1000000 -s 1400  &"
    
	sleep 2

    msg "Waiting for the Web server to be responsive again" 
    read -p "Press enter to continue"
	
	msg "Removing canary link deployment" 
    kubectl exec -it "$API" -n security -- ./client -arg "{\"action\":\"delete\", \"target\": \"canary-link\", \"arguments\": []}"
      
    msg "Removing detector link deployment" 
    kubectl exec -it "$API" -n security -- ./client -arg "{\"action\":\"delete\", \"target\": \"detector-link\", \"arguments\": []}"

    msg "Cleaning cluster"
    kubectl exec -n security "$AGENT_POD_1" -- bash -c "ovs-ofctl del-flows br-int cookie=0x0/-1 | true" &> /dev/null || true      
    kubectl exec -n security "$AGENT_POD_1" -- bash -c "ovs-vsctl clear bridge br-int mirrors"

	msg "Please remove speed limit from from phobos 3" 
    echo "sudo ethtool -s enp81s0f0 speed 10000 duplex full autoneg on"
    read -p "Press enter to continue"

	msg "Please review the time report"
	echo "cat ~/tsi/parser.log"
    read -p "Press enter to continue"

	msg "Please remove the time report"
	echo "sudo rm ~/tsi/*.log"
    read -p "Press enter to continue"

    echo -e "\n"
}

syn_flooding()
{
    msg "Starting Udp Flooding Demo"
    canaryCommands="{\"action\":\"create\", \"target\": \"canary\", \"arguments\": [\"-conn=http://$dnn_net1IP:30002/\"]}"
    detectorCommands="{\"action\":\"create\", \"target\": \"detector\", \"arguments\": [\"-c=block\"]}"
      
    msg "Deploying link canary client to monitor the health of the website (4 failures to spawn detector)" 
    kubectl exec -it "$API" -n security -- ./client -arg "$canaryCommands"
      
    msg "Deploying detector with mirroring but with BPF filter disabled" 
    kubectl exec -it "$API" -n security -- ./client -arg "$detectorCommands"

    msg "Sending normal requests to http://$dnn_net1IP:30002/ from alice" 
    kubectl exec "$ALICE_POD_1" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ &"
    kubectl exec "$ALICE_POD_2" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=7 -s=2000 &"
    kubectl exec "$ALICE_POD_3" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=7 -s=3000 &"
    kubectl exec "$ALICE_POD_4" -- bash -c "nohup /home/tsi/bin/alice -conn=http://$dnn_net1IP:30002/ -dev=9 -s=2000 &"
    kubectl exec "$ALICE_POD_5" -- bash -c "nohup /home/tsi/bin/alice -conn=http://youtube.com/ -dev=9 -s=3000 &"
    kubectl exec "$ALICE_POD_6" -- bash -c "nohup /home/tsi/bin/alice -conn=http://amazon.com/ -dev=7 -s=3000 &"
    kubectl exec "$ALICE_POD_7" -- bash -c "nohup /home/tsi/bin/alice -conn=http://facebook.com/ -dev=7 -s=3000 &"
    kubectl exec "$ALICE_POD_8" -- bash -c "nohup /home/tsi/bin/alice -conn=http://apple.com/ -dev=9 -s=3000 &"

    waitUntilAllPodsRun
    CANARY_1=$(kubectl get po -o wide -n security | grep "canary" | awk '{print $1}' | head -1)

    msg "Please open one new terminal and execute the following command" 
    echo "./see_parser"
    read -p "Press enter to continue"

    msg "Creating SYN flooding traffic from malicious pods"
    kubectl exec "$MALICE_POD_38" -- bash -c "nohup /home/tsi/bin/synFlooding -ip 10.137.7.23 -p 30002 -c 10  &"
    kubectl exec "$MALICE_POD_39" -- bash -c "nohup /home/tsi/bin/synFlooding -ip 10.137.7.23 -p 30002 -c 10  &"
    kubectl exec "$MALICE_POD_13" -- bash -c "nohup /home/tsi/bin/synFlooding -ip 10.137.7.23 -p 30002 -c 10  &"
    kubectl exec "$MALICE_POD_14" -- bash -c "nohup /home/tsi/bin/synFlooding -ip 10.137.7.23 -p 30002 -c 10  &"
    kubectl exec "$MALICE_POD_15" -- bash -c "nohup /home/tsi/bin/synFlooding -ip 10.137.7.23 -p 30002 -c 10  &"
    kubectl exec "$MALICE_POD_16" -- bash -c "nohup /home/tsi/bin/synFlooding -ip 10.137.7.23 -p 30002 -c 10  &"
    kubectl exec "$MALICE_POD_17" -- bash -c "nohup /home/tsi/bin/synFlooding -ip 10.137.7.23 -p 30002 -c 10  &"
    kubectl exec "$MALICE_POD_18" -- bash -c "nohup /home/tsi/bin/synFlooding -ip 10.137.7.23 -p 30002 -c 10  &"
    kubectl exec "$MALICE_POD_19" -- bash -c "nohup /home/tsi/bin/synFlooding -ip 10.137.7.23 -p 30002 -c 10  &"
    kubectl exec "$MALICE_POD_20" -- bash -c "nohup /home/tsi/bin/synFlooding -ip 10.137.7.23 -p 30002 -c 10  &"
    
	sleep 2

    msg "Waiting for the Web server to be responsive again" 
    read -p "Press enter to continue"
     
    msg "Removing canary link deployment" 
    kubectl exec -it "$API" -n security -- ./client -arg "{\"action\":\"delete\", \"target\": \"canary-link\", \"arguments\": []}"
      
    msg "Removing detector link deployment" 
    kubectl exec -it "$API" -n security -- ./client -arg "{\"action\":\"delete\", \"target\": \"detector-link\", \"arguments\": []}"

    msg "Cleaning cluster"
    kubectl exec -n security "$AGENT_POD_1" -- bash -c "ovs-ofctl del-flows br-int cookie=0x0/-1 | true" &> /dev/null || true      
    kubectl exec -n security "$AGENT_POD_1" -- bash -c "ovs-vsctl clear bridge br-int mirrors"
	
	msg "Please review the time report"
	echo "cat ~/tsi/parser.log"
    read -p "Press enter to continue"

	msg "Please remove the time report"
	echo "sudo rm ~/tsi/*.log"
    read -p "Press enter to continue"

    echo -e "\n"
}

usage() {
	echo "Usage: $1"
	echo "       $1 [OPTION]"
	echo "  interactive dDos demo"
	echo ""
	echo ""
	echo "Options:"
	echo "  --clean             clean the cluster from a possibly broken previous run"
	echo "  --http-flooding         run ddos with application level canary with default deployment commands"
	echo "  --udp-flooding      run udp flooding with application level canary with default deployment commands"
	echo "  --syn-flooding      run syn flooding with application level canary with default deployment commands"
	echo "  --help              print this message"

	exit $2
}

if [ $# -eq 1 ]; then
	if [ $1 = "--clean" ]; then
		check
		load_vars
		clean_cluster
	elif [ $1 = "--help" ]; then
		usage $0 0
	elif [ $1 = "--http-flooding" ]; then
		check
		init
		http_flooding
		clean_cluster
    elif [ $1 = "--udp-flooding" ]; then
        check
        init
        udp_flooding
        clean_cluster
    elif [ $1 = "--syn-flooding" ]; then
        check
        init
        syn_flooding
        clean_cluster
	else
		usage $0 1
	fi
elif [ $# -eq 0 ]; then
	check
	init
	interactive
	clean_cluster
else
	usage $0 1
fi
